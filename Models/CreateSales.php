<?phpinclude_once '../config.php';global $conn;if ($_SERVER['REQUEST_METHOD'] === 'POST') {    $data = [];    $errors = [];    // Begin a transaction    $conn->begin_transaction();    // Validate each product in the 'products' array    if (!empty($_POST['products'])) {        foreach ($_POST['products'] as $key => $product) {            // Get productId, quantity, and date from the input            $productId = $product['productId'];            $quantity = $product['quantity'];            $sales_date = $product['date'];            // Check if productId, quantity, and date are provided            if (empty($productId) || empty($quantity) || empty($sales_date)) {                $errors['general'] = 'Product ID, quantity, or date cannot be empty';                continue; // Skip this product and go to the next one            }            //check if the quantity is valid or checking if the quantity is  negative            $convertedNumber = (int) $quantity;            if ($convertedNumber <= 0){                $errors['general'] = 'Please Input invalid Quantity';            }            // Fetch current stock and product name from the database            $stockQuery = "SELECT current_stack, product_name FROM product WHERE product_id = ?";            $stockStmt = $conn->prepare($stockQuery);            if (!$stockStmt) {                $errors['db'] = 'Error preparing stock query: ' . $conn->error;                break;            }            $stockStmt->bind_param('i', $productId);            $stockStmt->execute();            $stockStmt->bind_result($stockQuantity, $productName);            $stockStmt->fetch();            $stockStmt->close();            // Check if product stock is sufficient            if ($stockQuantity < $quantity) {                $errors['general'][$key] = 'Insufficient stock for ' . $productName;                continue; // Skip this product and go to the next one            }        }    } else {        $errors['general'] = 'Please complete sales details.';    }    // Handle errors before proceeding with insertion    if (!empty($errors)) {        $conn->rollback();  // Roll back any previous actions        $data['success'] = false;        $data['errors'] = $errors;    } else {        // Prepare the SQL query for inserting sales        $query = "INSERT INTO sales (product_id, quantity_sold, sale_amount, Sales_date, branch,EmployeeName) VALUES (?, ?, ?, ?, ?,?)";        $stmt = $conn->prepare($query);        if ($stmt === false) {            $data['success'] = false;            $data['message'] = 'Failed to prepare the SQL statement';            $conn->rollback();  // Rollback transaction            echo json_encode($data);            exit();        }        foreach ($_POST['products'] as $item) {            $productId = $item['productId'];            $quantity = $item['quantity'];            $price = $item['price'];            $sales_date = $item['date'];            $branch = $item['branch'];            $EmployeeName = $item['EmployeeName'];            // Insert the sale record            $stmt->bind_param('iidsss', $productId, $quantity, $price, $sales_date, $branch,$EmployeeName);            if (!$stmt->execute()) {                $data['success'] = false;                $data['message'] = 'Failed to insert sales data';                $conn->rollback();  // Rollback transaction                echo json_encode($data);                exit();            }            // After inserting the sale, decrease the stock quantity            $updateStockQuery = "UPDATE product SET current_stack = current_stack - ? WHERE product_id = ?";            $updateStockStmt = $conn->prepare($updateStockQuery);            $updateStockStmt->bind_param('ii', $quantity, $productId);            if (!$updateStockStmt->execute()) {                $data['success'] = false;                $data['message'] = 'Failed to update stock for product ID ' . $productId;                $conn->rollback();  // Rollback transaction                echo json_encode($data);                exit();            }            $updateStockStmt->close();        }        // If all inserts succeed, commit the transaction        $conn->commit();        $stmt->close();        // Success response        $data['success'] = true;        $data['message'] = 'Sales were successfully created!';    }    echo json_encode($data);}